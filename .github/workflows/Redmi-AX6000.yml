#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: 红米AX6000

on:
    repository_dispatch:
    workflow_dispatch:  
  
  # schedule:
  #   - cron: 0 16 * * 5

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: Redmi-AX6000.config
  DIY_P1_SH: redmi-ax6000-1.sh
  DIY_P2_SH: redmi-ax6000-2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean

    - name: 下载源码
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载dl库
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s 
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: 整理固件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/        

    - name: 上传ipk包
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt_package
          path: ./artifact/package/

    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt_firmware
          path: ./bin/targets/
          
    # - name: 创建release标签
    #   id: tag
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     release_tag="${{ env.FIRMWARE_VERSION }}-OpenWrt-360T7"
    #     echo "编译时间：$(date +'%Y年%m月%d日 %H点%M分')" >> release.txt
    #     echo "默认网关：192.168.50.1" >> release.txt
    #     echo "默认插件："$(cat extra.config|sed 's/#.*//g;s/CONFIG_PACKAGE_.*=n//g'|sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/g')|sed 's/ /、/g' >> release.txt
    #     echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
    #     echo "status=success" >> $GITHUB_OUTPUT

    # - name: 将固件上传到release
    #   uses: softprops/action-gh-release@v1
    #   if: steps.tag.outputs.status == 'success' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     name: ${{ env.FIRMWARE_VERSION }}-OpenWrt-360T7
    #     tag_name: ${{ steps.tag.outputs.release_tag }}
    #     body_path: release.txt
    #     files: ${{ env.FIRMWARE }}/*

    # - name: PushPlus 通知
    #   if: env.PUSHPLUS_TOKEN
    #   continue-on-error: true
    #   run: |
    #     curl -k -d "title=OpenWrt-360T7固件编译成功" -d "content=编译固件版本：${{ env.FIRMWARE_VERSION }}%0A编译开始时间：${{ env.START_DATE }}%0A编译结束时间：$(date +'%Y年%m月%d日 %H点%M分%S秒')" -d "token=${{ env.PUSHPLUS_TOKEN }}&channel=cp&webhook=server" "http://www.pushplus.plus/send"

    # - name: 删除工作流运行
    #   uses: GitRML/delete-workflow-runs@main
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 3

    # - name: 删除旧的releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
